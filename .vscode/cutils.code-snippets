{
  // Place your dsa workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "base": {
    "prefix": "base",
    "body": [
      "#include <stdint.h>",
      "#include <stdio.h>",
      "#include <stdlib.h>",
      "",
      "#define TRUE (uint8_t)1",
      "#define FALSE (uint8_t)0",
      "",
      "#define ll int64_t",
      "#define ull uint64_t",
      "",
      "",
      "int main() {",
      "    int $1, $2;",
      "    scanf(\"%d %d\", &$1, &$2);",
      "",
      "    $3",
      "",
      "    return 0;",
      "}"
    ],
    "description": "base"
  },

  "Array Input": {
    "prefix": "arrin",
    "body": [
      "for (size_t $1 = 0; $1 < $2; $1++) {",
      "    scanf(\"%d\", $3 + i);",
      "}",
      ""
    ],
    "description": "Array Input"
  },

  "Compare Function (Ascending)": {
    "prefix": "cmpfunc",
    "body": [
      "int cmpfunc(const void* a, const void* b) { return (*(int*)a - *(int*)b); }"
    ],
    "description": "Compare Function (Ascending)"
  },

  "dynamic-initialization": {
    "prefix": ["new", "di"],
    "body": "${1:type}* ${2:name} = (${1:type}*)malloc(sizeof(${1:type}));"
  },

  "Graph Simple": {
    "prefix": "gs",
    "body": [
      "struct Node",
      "{",
      "    int vertex;",
      "    struct Node* next;",
      "};",
      "",
      "struct Graph",
      "{",
      "    int numVertices;",
      "    struct Node** adjList;",
      "};",
      "",
      "",
      "typedef struct Node Node;",
      "typedef struct Graph Graph;",
      "",
      "Node* createNode(int v) {",
      "    Node* node = (Node*)malloc(sizeof(Node));",
      "    node->vertex = v;",
      "    node->next = NULL;",
      "",
      "    return node;",
      "}",
      "",
      "Graph* createGraph(int vertices) {",
      "    Graph* graph = (Graph*)malloc(sizeof(Graph));",
      "",
      "    graph->numVertices = vertices;",
      "    graph->adjList = malloc(vertices * sizeof(Node*));",
      "",
      "    for (int i = 0; i < vertices; ++i) {",
      "        graph->adjList[i] = NULL;",
      "    }",
      "",
      "    return graph;",
      "}",
      "",
      "void addEdge(Graph* graph, int s, int d) {",
      "    Node* node = createNode(d);",
      "    node->next = graph->adjList[s];",
      "    graph->adjList[s] = node;",
      "",
      "    node = createNode(s);",
      "    node->next = graph->adjList[d];",
      "    graph->adjList[d] = node;",
      "}"
    ],
    "description": "Graph Library"
  },
  "graph-base": {
    "prefix": "gb",
    "body": [
      "#include <stdio.h>",
      "#include <stdint.h>",
      "#include <stdlib.h>",
      "",
      "struct Node",
      "{",
      "    int vertex;",
      "    struct Node* next;",
      "};",
      "",
      "struct Graph",
      "{",
      "    int numVertices;",
      "    struct Node** adjList;",
      "};",
      "",
      "",
      "typedef struct Node Node;",
      "typedef struct Graph Graph;",
      "",
      "Node* createNode(int v) {",
      "    Node* node = (Node*)malloc(sizeof(Node));",
      "    node->vertex = v;",
      "    node->next = NULL;",
      "",
      "    return node;",
      "}",
      "",
      "Graph* createGraph(int vertices) {",
      "    Graph* graph = (Graph*)malloc(sizeof(Graph));",
      "",
      "    graph->numVertices = vertices;",
      "    graph->adjList = malloc(vertices * sizeof(Node*));",
      "",
      "    for (int i = 0; i < vertices; ++i) {",
      "        graph->adjList[i] = NULL;",
      "    }",
      "",
      "    return graph;",
      "}",
      "",
      "void addEdge(Graph* graph, int s, int d) {",
      "    Node* node = createNode(d);",
      "    node->next = graph->adjList[s];",
      "    graph->adjList[s] = node;",
      "",
      "    node = createNode(s);",
      "    node->next = graph->adjList[d];",
      "    graph->adjList[d] = node;",
      "}",
      "",
      "int main() {",
      "    uint32_t n, m, u, v;",
      "    scanf(\"%d%*c%d\", &n, &m);",
      "",
      "    Graph* $1 = createGraph(n);",
      "",
      "    for (int i = 0; i < n; ++i) {",
      "        scanf(\"%d %d\", &u, &v);",
      "        addEdge($1, u, v);",
      "    }",
      "",
      "    ",
      "",
      "    return 0;",
      "}"
    ],
    "description": "graph-base"
  },
  "Print Graph": {
    "prefix": "pg",
    "body": [
      "void printGraph(Graph* graph, uint32_t v) {",
      "    for (uint32_t i = 0; i < v; ++i) {",
      "        printf(\"%d:\", i);",
      "        for (Node* node = graph->adjList[i]; node != NULL; node = node->next) {",
      "            printf(\" -> %d\", node->vertex);",
      "        }",
      "",
      "        printf(\"\\n\");",
      "    }",
      "}"
    ],
    "description": "Print Graph"
  },
  "BFS": {
    "prefix": "bfs",
    "body": [
      "void BFS(Graph* graph, int startVertex) { // Uses a circular queue",
      "    int q[N], front = 0, rear = 0;",
      "",
      "    // Enque startVertex",
      "    q[rear++] = startVertex; ",
      "    visited[startVertex] = 1;",
      "",
      "    while (front < rear) {",
      "        // Dequeu",
      "        int v = q[front++];",
      "        front %= N;",
      "",
      "        for (Node* u = graph->adjList[v]; u != NULL; u = u->next) {",
      "            if (!visited[u->vertex]) {",
      "                visited[u->vertex] = 1;",
      "",
      "                q[rear++] = u->vertex;",
      "                rear %= N;",
      "            }",
      "        }",
      "",
      "    }",
      "}"
    ],
    "description": "BFS"
  },
  "DFS": {
    "prefix": "DFS",
    "body": [
      "int DFS(Graph* graph, int start, int visited[1000]) {",
      "    visited[start] = 1;",
      "",
      "    printf(\"%d \", start);",
      "",
      "    for (Node* u = graph->adjList[start]; u != NULL; u = u->next) {",
      "        if (!visited[u->vertex]) {",
      "            DFS(graph, u->vertex, visited);",
      "        }",
      "    }",
      "}"
    ],
    "description": "DFS"
  },
}
